--mode.com


--Basic SQL


--SQL SELECT


--Write a query to select all of the columns in the tutorial.us_housing_units table without using *. 

SELECT year, month, month_name, west, midwest, south, northeast
FROM tutorial.us_housing_units;

--Write a query to select all of the columns in tutorial.us_housing_units and rename them so that their first letters are capitalized. 

SELECT year AS "Year", 
month AS "Month", 
month_name AS "Month Name", 
west AS "West", 
midwest AS "Midwest", 
south AS "South", 
northeast AS "Northeast"
FROM tutorial.us_housing_units;


--SQL LIMIT


--Write a query that uses the LIMIT command to restrict the result set to only 15 rows. 

SELECT *
FROM tutorial.us_housing_units
LIMIT 15;


--SQL Comparison Operators


--Did the West Region ever produce more than 50,000 housing units in one month? 

SELECT *
FROM tutorial.us_housing_units
WHERE west > 50;

--Did the South Region ever produce 20,000 or fewer housing units in one month? 

SELECT *
FROM tutorial.us_housing_units
WHERE south <= 20;

--Write a query that only shows rows for which the month name is February.

SELECT *
FROM tutorial.us_housing_units
WHERE month_name = 'February';


--Write a query that only shows rows for which the month_name starts with the letter "N" or an earlier letter in the alphabet. 

SELECT *
FROM tutorial.us_housing_units
WHERE month_name < 'o';

--Write a query that calculates the sum of all four regions in a separate column. 

SELECT west, south, midwest, northeast, 
west + south + midwest +northeast AS usa_total
FROM tutorial.us_housing_units;

--Write a query that returns all rows for which more units were produced in the West region than in the Midwest and Northeast combined. 

SELECT *
FROM tutorial.us_housing_units
WHERE west > (midwest + northeast);

--Write a query that calculates the percentage of all houses completed in the United States represented by each region. Only return results from the year 2000 and later. 

SELECT south/(south+west+midwest+northeast)*100 AS south_perc, 
west/(south+west+midwest+northeast)*100 AS west_perc, 
midwest/(south+west+midwest+northeast)*100 AS midwest_perc, 
northeast/(south+west+midwest+northeast)*100 AS northeast_perc
FROM tutorial.us_housing_units
WHERE year >= 2000;


--SQL LIKE


--Write a query that returns all rows for which Ludacris was a member of the group. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group" LIKE '%Ludacris%';

--Write a query that returns all rows for which the first artist listed in the group has a name that begins with "DJ". 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group" LIKE 'DJ%';


--SQL IN


--Write a query that shows all of the entries for Elvis and M.C. Hammer. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group" IN ('M.C. Hammer', 'Hammer', 'Elvis Presley');


--SQL BETWEEN


--Write a query that shows all top 100 songs from January 1, 1985 through December 31, 1990. 

SELECT song_name
FROM tutorial.billboard_top_100_year_end
WHERE year BETWEEN 1985 AND 1990;


--SQL IS NULL


--Write a query that shows all of the rows for which song_name is null. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE song_name IS NULL;


--SQL AND


--Write a query that surfaces all rows for top-10 hits for which Ludacris is part of the Group. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank <= 10
AND "group" LIKE '%ludacris%';

--Write a query that surfaces the top-ranked records in 1990, 2000, and 2010. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank = 1
AND year IN (1990, 2000, 2010);

--Write a query that lists all songs from the 1960s with "love" in the title. 

SELECT song_name
FROM tutorial.billboard_top_100_year_end
WHERE year BETWEEN 1960 AND 1969
AND song_name LIKE '%love%';


--SQL OR


--Write a query that returns all rows for top-10 songs that featured either Katy Perry or Bon Jovi. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank <= 10
AND ("group" LIKE '%Katy pPrry%' OR "group" LIKE '%Bon Jovi%');

--Write a query that returns all songs with titles that contain the word "California" in either the 1970s or 1990s. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE song_name LIKE '%California%'
AND (year BETWEEN 1970 AND 1979 OR year BETWEEN 1990 AND 1999);

--Write a query that lists all top-100 recordings that feature Dr. Dre before 2001 or after 2009. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group" LIKE '%Dr. Dre%'
AND (year <= 2000 OR year >= 2010);


--SQL NOT


--Write a query that returns all rows for songs that were on the charts in 2013 and do not contain the letter "a". 

SELECT song_name
FROM tutorial.billboard_top_100_year_end
WHERE song_name NOT LIKE '%a%'
AND year = 2013;


--SQL ORDER BY


--Write a query that returns all rows from 2012, ordered by song title from Z to A. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year = 2012
ORDER BY song_name DESC;

--Write a query that returns all rows from 2010 ordered by rank, with artists ordered alphabetically for each song. 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year = 2010
ORDER BY year_rank, artist;

--Write a query that shows all rows for which T-Pain was a group member, ordered by rank on the charts, from lowest to highest rank (from 100 to 1). 

SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group" LIKE '%T-Pain%'
ORDER BY year_rank DESC;

--Write a query that returns songs that ranked between 10 and 20 (inclusive) in 1993, 2003, or 2013. Order the results by year and rank.

SELECT song_name
FROM tutorial.billboard_top_100_year_end
WHERE year IN (1993,2003,2013)
AND year_rank BETWEEN 10 AND 20 
ORDER BY year, year_rank;


--Intermediate SQL


--SQL COUNT


--Write a query to count the number of non-null rows in the low column.

SELECT COUNT(low)
FROM tutorial.aapl_historical_stock_price;

--Write a query that determines counts of every single column. 

SELECT COUNT(year), COUNT(month), COUNT(open), COUNT(high), COUNT(low), COUNT(close), COUNT(volume)
FROM tutorial.aapl_historical_stock_price;


--SQL SUM


--Write a query to calculate the average opening price.

SELECT SUM(open)/COUNT(open)
FROM tutorial.aapl_historical_stock_price;


--SQL MIN/MAX


--What was Apple's lowest stock price?

SELECT MIN(low)
FROM tutorial.aapl_historical_stock_price;

--What was the highest single-day increase in Apple's share value? 

SELECT MAX(close - open)
FROM tutorial.aapl_historical_stock_price;


--SQL AVG


--Write a query that calculates the average daily trade volume for Apple stock. 

SELECT AVG(volume)
FROM tutorial.aapl_historical_stock_price;


--SQL GROUP BY


--Calculate the total number of shares traded each month. Order your results chronologically. 

SELECT year, month, SUM(volume)
FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month;

--Write a query to calculate the average daily price change in Apple stock, grouped by year.

SELECT year, AVG(close - open)
FROM tutorial.aapl_historical_stock_price
GROUP BY year; 

--Write a query that calculates the lowest and highest prices that Apple stock achieved each month.

SELECT year, month, MIN(low), MAX(high)
FROM tutorial.aapl_historical_stock_price
GROUP BY year, month; 


--SQL CASE


--Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first. 

SELECT player_name,
CASE WHEN state = 'CA' THEN 'yes'
ELSE NULL END AS from_california
FROM benn.college_football_players
ORDER BY from_california;

--Write a query that includes players' names and a column that classifies them into four categories based on height. 

SELECT player_name,
CASE WHEN height > 77 THEN 'really tall'
WHEN height > 70 THEN 'tall'
WHEN height > 63 THEN 'average'
ELSE 'short' END AS height_group
FROM benn.college_football_players;

--Write a query that selects all columns from benn.college_football_players and adds an additional column that displays the player's name if that player is a junior or senior. 

SELECT *,
CASE WHEN year IN ('JR', 'SR') THEN player_name 
ELSE NULL END AS upperclass_player
FROM benn.college_football_players;

--Write a query that counts the number of 300lb+ players for each of the following regions: West Coast (CA, OR, WA), Texas, and Other (everywhere else). 

SELECT CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
WHEN state = 'TX' THEN 'Texas'
ELSE 'Other' END AS region,
COUNT(CASE WHEN state IN ('CA', 'OR', 'WA') THEN 'West Coast'
WHEN state = 'TX' THEN 'Texas'
ELSE 'Other' END) AS players
FROM benn.college_football_players
WHERE weight >= 300
GROUP BY region;

--Write a query that calculates the combined weight of all underclass players (FR/SO) in California as well as the combined weight of all upperclass players (JR/SR) in California.

SELECT 
CASE WHEN year IN ('FR','SO') THEN 'lowerclass'
WHEN year IN ('JR','SR') THEN 'upperclass'
ELSE NULL END AS class,
SUM(weight)
FROM benn.college_football_players
WHERE state = 'CA'
GROUP BY class;

--Write a query that displays the number of players in each state, with FR, SO, JR, and SR players in separate columns and another column for the total number of players. Order results such that states with the most players come first. 

SELECT state, COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS num_of_fr,
COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS num_of_so,
COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS num_of_jr,
COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS num_of_sr,
COUNT(year) AS total
FROM benn.college_football_players
GROUP BY state
ORDER BY total DESC;

--Write a query that shows the number of players at schools with names that start with A through M, and the number at schools with names starting with N - Z. 

SELECT COUNT(CASE WHEN school_name < 'n' THEN 1 ELSE NULL END) AS am_count,
COUNT(CASE WHEN school_name >= 'n' THEN 1 ELSE NULL END) AS nz_count
FROM benn.college_football_players;


--SQL DISTINCT


--Write a query that returns the unique values in the year column, in chronological order. 

SELECT DISTINCT year
FROM tutorial.aapl_historical_stock_price
ORDER BY year;

--Write a query that counts the number of unique values in the month column for each year. 

SELECT year, COUNT(DISTINCT month)
FROM tutorial.aapl_historical_stock_price
GROUP BY year
ORDER BY year;

--Write a query that separately counts the number of unique values in the month column and the number of unique values in the `year` column. 

SELECT COUNT(DISTINCT month), COUNT(DISTINCT year)
FROM tutorial.aapl_historical_stock_price;


--SQL JOINS


--Write a query that selects the school name, player name, position, and weight for every player in Georgia, ordered by weight (heaviest to lightest).

SELECT school_name, player_name, position, weight
FROM benn.college_football_players
WHERE state = 'GA'
ORDER BY weight DESC;


--INNER JOIN


--Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division. 

SELECT p.player_name, p.school_name, t.conference
FROM benn.college_football_players AS p
JOIN benn.college_football_teams AS t
ON t.school_name = p.school_name
WHERE t.division = 'FBS (Division I-A Teams)';


--SQL LEFT JOIN


--Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and the tutorial.crunchbase_companies table, but instead of listing individual rows, count the number of non-null rows in each table. 

SELECT COUNT(c.permalink) AS c_count, COUNT(a.company_permalink) AS a_count
FROM tutorial.crunchbase_companies AS c
JOIN tutorial.crunchbase_acquisitions AS a
ON c.permalink = a.company_permalink;

--Modify the query above to be a LEFT JOIN. Note the difference in results. 

SELECT COUNT(c.permalink) AS c_count, COUNT(a.company_permalink) AS a_count
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_acquisitions AS a
ON c.permalink = a.company_permalink;

--Count the number of unique companies (don't double-count companies) and unique acquired companies by state. Do not include results for which there is no state data, and order by the number of acquired companies from highest to lowest. 

SELECT c.state_code, COUNT(DISTINCT c.permalink) AS total_companies, COUNT(DISTINCT a.company_permalink) AS total_acquired
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_acquisitions AS a
ON c.permalink = a.company_permalink
WHERE c.state_code IS NOT NULL 
GROUP BY c.state_code
ORDER BY total_acquired DESC;


--SQL RIGHT JOIN


--Rewrite the previous practice query in which you counted total and acquired companies by state, but with a RIGHT JOIN instead of a LEFT JOIN. The goal is to produce the exact same results. 

SELECT c.state_code, COUNT(DISTINCT c.permalink) AS total_companies, COUNT(DISTINCT a.company_permalink) AS total_acquired
FROM tutorial.crunchbase_acquisitions AS a
RIGHT JOIN tutorial.crunchbase_companies AS c
ON c.permalink = a.company_permalink
WHERE c.state_code IS NOT NULL 
GROUP BY c.state_code
ORDER BY total_acquired DESC;


--SQL Joins Using WHERE or ON


--Write a query that shows a company's name, "status", and the number of unique investors in that company. Order by the number of investors from most to fewest. Limit to only companies in the state of New York. 

SELECT c.name AS name, c.status AS status, COUNT(DISTINCT i.investor_name) AS investor_count
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_investments AS i
ON c.permalink = i.company_permalink
WHERE c.state_code = 'NY'
GROUP BY name, status
ORDER BY investor_count DESC;

--Write a query that lists investors based on the number of companies in which they are invested. Include a row for companies with no investor, and order from most companies to least 

SELECT CASE WHEN i.investor_name IS NULL THEN 'No Investors'
ELSE i.investor_name END AS investor,
COUNT(DISTINCT c.permalink) AS company_count
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_investments AS i
ON c.permalink = i.company_permalink
GROUP BY investor
ORDER BY company_count DESC;


--SQL FULL OUTER JOIN


--Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1 using a FULL JOIN. Count up the number of rows that are matched/unmatched as in the example above. 

SELECT COUNT(CASE WHEN c.permalink IS NOT NULL AND i.company_permalink IS NULL
THEN c.permalink ELSE NULL END) AS companies_only,
COUNT(CASE WHEN c.permalink IS NOT NULL AND i.company_permalink IS NOT NULL
THEN c.permalink ELSE NULL END) AS both_tables,
COUNT(CASE WHEN c.permalink IS NULL AND i.company_permalink IS NOT NULL
THEN i.company_permalink ELSE NULL END) AS investments_only
FROM tutorial.crunchbase_companies AS c
FULL JOIN tutorial.crunchbase_investments_part1 AS i
ON c.permalink = i.company_permalink;


--SQL UNION


--Write a query that appends the two crunchbase_investments datasets above (including duplicate values). 
--Filter the first dataset to only companies with names that start with the letter "T", and filter the second to companies with names starting with "M" (both not case-sensitive). 
--Only include the company_permalink, company_name, and investor_name columns. 

SELECT company_permalink, company_name, investor_name
FROM tutorial.crunchbase_investments_part1
WHERE company_name LIKE 'T%'
 
UNION

SELECT company_permalink, company_name, investor_name
FROM tutorial.crunchbase_investments_part2
WHERE company_name LIKE 'M%';

--Write a query that shows 3 columns. The first indicates which dataset (part 1 or 2) the data comes from, the second shows company status, and the third is a count of the number of investors. 

SELECT 'dataset_part1' AS dataset_name, c.status, COUNT(DISTINCT i.investor_permalink) AS investor_count
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_investments_part1 AS i
ON c.permalink = i.company_permalink
GROUP BY dataset_name, c.status

UNION 
 
SELECT 'dataset_part2' AS dataset_name, c.status, COUNT(DISTINCT i.investor_permalink) AS investor_count
FROM tutorial.crunchbase_companies AS c
LEFT JOIN tutorial.crunchbase_investments_part2 AS i
ON c.permalink = i.company_permalink
GROUP BY dataset_name, c.status;

