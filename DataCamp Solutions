--Onboarding


--1. From looking at the tabs, who is the first person listed in the people table?
 
SELECT name
FROM people
LIMIT 1;

--2.Who is the second person listed in the query result? 

SELECT name
FROM people
LIMIT 1
OFFSET 1;

--3.Add SELECT at the start of line 2 to get rid of errors.

SELECT 'DataCamp <3 SQL'
AS result;

--4.Change 'SQL is' to 'SQL is cool'.

SELECT 'SQL is cool'
AS result;

--How many fields does the employees table above contain?  4


--SELECTing single columns


--1.Select the title column from the films table.

SELECT title 
FROM films;

--2.Select the release_year column from the films table.

SELECT release_year 
FROM films;

--3.Select the name of each person in the people table.

SELECT name 
FROM people;


--SELECTing multiple columns


--1.Get the title of every film from the films table.

SELECT title 
FROM films;

--2.Get the title and release year for every film.

SELECT title, release_year
FROM films;

--3.Get the title, release year and country for every film.

SELECT title, release_year, country
FROM films;

--4.Get all columns from the films table.

SELECT *
FROM films;


--SELECT DISTINCT


--1.Get all the unique countries represented in the films table.

SELECT DISTINCT country
FROM films;

--2.Get all the different film certifications from the films table.

SELECT DISTINCT certification
FROM films;

--3.Get the different types of film roles from the roles table.

SELECT DISTINCT role
FROM roles;


--COUNT


--1.How many records are contained in the reviews table? 

SELECT COUNT(*)
FROM reviews;

--2.Count the number of rows in the people table.

SELECT COUNT (*) 
FROM people

--3.Count the number of (non-missing) birth dates in the people table.

SELECT COUNT(birthdate)
FROM people;

--4.Count the number of unique birth dates in the people table.

SELECT COUNT(DISTINCT birthdate)
FROM people;

--5.Count the number of unique languages in the films table.

SELECT COUNT (DISTINCT language) 
FROM films;

--6.Count the number of unique countries in the films table.

SELECT COUNT (DISTINCT country) 
FROM films;


--Simple filtering of numeric values


--What does the following query return? Films released after the year 2000

--1.Get all details for all films released in 2016.

SELECT * 
FROM films 
WHERE release_year = 2016;

--2.Get the number of films released before 2000.

SELECT COUNT (*) 
FROM films 
WHERE release_year <2000;

--3.Get the title and release year of films released after 2000.

SELECT title, release_year 
FROM films 
WHERE release_year > 2000;


--Simple filtering of text


--1.Get all details for all French language films.

SELECT * 
FROM films 
WHERE language = 'French';

--2.Get the name and birth date of the person born on November 11th, 1974.

SELECT name, birthdate 
FROM people 
WHERE birthdate = '1974-11-11';
 
--3.Get the number of Hindi language films.

SELECT COUNT (*) 
FROM films 
WHERE language = 'Hindi';

--4.Get all details for all films with an R certification.

SELECT * 
FROM films 
WHERE certification = 'R';


--WHERE AND


--1.Get the title and release year for all Spanish language films released before 2000.

SELECT title, release_year 
FROM films 
WHERE language = 'Spanish' 
AND release_year < 2000;

--2.Get all details for Spanish language films released after 2000.

SELECT * 
FROM films 
WHERE language = 'Spanish' 
AND release_year > 2000;

--3.Get all details for Spanish language films released after 2000, but before 2010.

SELECT * 
FROM films 
WHERE language = 'Spanish' 
AND release_year > 2000 
AND release_year < 2010;

--What does the OR operator do? Display only rows that meet at least one of the specified conditions. 


--WHERE AND OR (2)


--1.Get the title and release year for films released in the 90s.
 
SELECT title, release_year 
FROM films 
WHERE release_year < 2000 
AND release_year >= 1990;

--2.Now, build on your query to filter the records to only include French or Spanish language films. 

SELECT title, release_year
FROM films
WHERE (release_year >= 1990 AND release_year < 2000)
AND (language = 'French' OR language = 'Spanish');

--3.Finally, restrict the query to only return films that took in more than $2M gross.

SELECT title, release_year
FROM films
WHERE (release_year >= 1990 AND release_year < 2000)
AND (language = 'French' OR language = 'Spanish')
AND gross > 2000000;


--BETWEEN


--What does the BETWEEN keyword do? Filter values in a specified range 

--1.Get the title and release year of all films released between 1990 and 2000 (inclusive). 

SELECT title, release_year 
FROM films 
WHERE release_year BETWEEN 1990 AND 2000;

--2.Now, build on your previous query to select only films that have budgets over $100 million.

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000;

--3.Now restrict the query to only return Spanish language films.

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND language = 'Spanish';

--4.Finally, modify to your previous query to include all Spanish language or French language films with the same criteria as before.

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND (language = 'Spanish' OR language = 'French');


--WHERE IN


--1.Get the title and release year of all films released in 1990 or 2000 that were longer than two hours.

SELECT title, release_year 
FROM films 
WHERE release_year IN (1990, 2000) 
AND duration > 120;

--2.Get the title and language of all films which were in English, Spanish, or French.

SELECT title, language 
FROM films 
WHERE language IN ('English', 'Spanish', 'French');

--3.Get the title and certification of all films with an NC-17 or R certification.

SELECT title, certification 
FROM films 
WHERE certification IN ('NC-17', 'R');


--NULL and IS NULL


--What does NULL represent? A missing value 

--1.Get the names of people who are still alive, i.e. whose death date is missing.

SELECT name 
FROM people 
WHERE deathdate IS NULL;

--2.Get the title of every film which doesn't have a budget associated with it.

SELECT title 
FROM films 
WHERE budget IS NULL;

--3.Get the number of films which don't have a language associated with them.

SELECT COUNT (*) 
FROM films 
WHERE language IS NULL;


--LIKE and NOT LIKE


--1.Get the names of all people whose names begin with 'B'. 

SELECT name 
FROM people 
WHERE name LIKE 'B%';

--2.Get the names of people whose names have 'r' as the second letter.

SELECT name 
FROM people 
WHERE name LIKE '_r%';

--3.Get the names of people whose names don't start with A. 

SELECT name 
FROM people 
WHERE name NOT LIKE 'A%';


--Aggregate functions


--1.Get the total duration of all films.

SELECT SUM (duration) 
FROM films;

--2.Get the average duration of all films.

SELECT AVG (duration) 
FROM films;

--3.Get the duration of the shortest film.

SELECT MIN (duration) 
FROM films;

--4.Get the duration of the longest film.

SELECT MAX (duration) 
FROM films;


--Aggregate functions practice


--1.Get the total amount grossed by all films.

SELECT SUM (gross) 
FROM films;

--2.Get the average amount grossed by all films.

SELECT AVG (gross) 
FROM films;

--3.Get the amount grossed by the worst performing film.

SELECT MIN (gross) 
FROM films;

--4.Get the amount grossed by the best performing film.

SELECT MAX (gross) 
FROM films;


--Combining aggregate functions with WHERE


--1.Get the total amount grossed by all films made in the year 2000 or later.

SELECT SUM (gross) 
FROM films
WHERE release_year >= 2000;

--2.Get the average amount grossed by all films whose titles start with the letter 'A'.

SELECT AVG (gross) 
FROM films
WHERE title LIKE 'A%';

--3.Get the amount grossed by the worst performing film in 1994.

SELECT MIN (gross) 
FROM films
WHERE release_year = 1994;

--4.Get the amount grossed by the best performing film between 2000 and 2012, inclusive.

SELECT MAX (gross) 
FROM films
WHERE release_year BETWEEN 2000 AND 2012;


--A note on arithmetic


--What is the result of SELECT (10 / 3);?  3


--It's AS simple AS aliasing


--1.Get the title and net profit for all films. Alias the net profit as net_profit.

SELECT title, gross-budget AS net_profit 
FROM films;

--2.Get the title and duration in hours for all films. Alias the duration in hours as duration_hours.

SELECT title, duration / 60.0 AS duration_hours 
FROM films;

--3.Get the average duration in hours for all films, aliased as avg_duration_hours 

SELECT AVG (duration) / 60.0 AS avg_duration_hours 
FROM films;


--Even more aliasing


--1.Get the percentage of people who are no longer alive. Alias the result as percentage_dead.

SELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead 
FROM people;

--2.Get the number of years between the newest film and oldest film. Alias the result as difference.

SELECT MAX(release_year) - MIN (release_year) AS difference 
FROM films;

--3.Get the number of decades the films table covers. Alias the result as number_of_decades.

SELECT (MAX(release_year) - MIN(release_year)) / 10 AS number_of_decades 
FROM films;


--ORDER BY


--How do you think ORDER BY sorts a column of text values by default? Alphabetically (A-Z) 

--1.Get the names of people from the people table, sorted alphabetically.

SELECT name 
FROM people 
ORDER BY name;

--2.Get the names of people, sorted by birth date.

SELECT name 
FROM people 
ORDER BY birthdate;

--3.Get the birth date and name for every person, in order of when they were born.

SELECT birthdate, name 
FROM people 
ORDER BY birthdate


--Sorting single columns


--1.Get the title of films released in 2000 or 2012, in the order they were released.

SELECT title 
FROM films 
WHERE release_year IN (2000, 2012) 
ORDER BY release_year;

--2.Get all details for all films except those released in 2015 and order them by duration.

SELECT * 
FROM films 
WHERE release_year <> 2015 
ORDER BY duration;

--3.Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.

SELECT title, gross 
FROM films 
WHERE title LIKE 'M%' 
ORDER BY title;


--Sorting single columns (DESC)


--1.Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.

SELECT imdb_score, film_id 
FROM reviews 
ORDER BY imdb_score DESC;

--2.Get the title for every film, in reverse order.

SELECT title 
FROM films 
ORDER BY title DESC;

--3.Get the title and duration for every film, in order of longest duration to shortest.

SELECT title, duration 
FROM films 
ORDER BY duration DESC;


--Sorting multiple columns


--1.Get the birth date and name of people in the people table, in order of when they were born and alphabetically by name.

SELECT birthdate, name 
FROM people 
ORDER BY birthdate, name;

--2.Get the release year, duration, and title of films ordered by their release year and duration.

SELECT release_year, duration, title 
FROM films 
ORDER BY release_year, duration;

--3.Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.

SELECT certification, release_year, title 
FROM films 
ORDER BY certification, release_year;

--4.Get the names and birthdates of people ordered by name and birth date.

SELECT name, birthdate 
FROM people 
ORDER BY name, birthdate;


--GROUP BY


--What is GROUP BY used for? Performing operations by group 

--1.Get the release year and count of films released in each year.

SELECT release_year, count (*) 
FROM films 
GROUP BY release_year;

--2.Get the release year and average duration of all films.

SELECT release_year, AVG (duration) 
FROM films 
GROUP BY release_year;

--3.Get the release year and largest budget for all films.

SELECT release_year, MAX (budget) 
FROM films 
GROUP BY release_year;

--4.Get the IMDB score and count of film reviews in the reviews table.

SELECT imdb_score, count (*) 
FROM reviews 
GROUP BY imdb_score;


--GROUP BY practice (2)


--1.Get the release year and lowest gross earnings per release year.

SELECT release_year, MIN(gross) 
FROM films GROUP BY release_year 
ORDER BY release_year;

--2.Get the language and total gross amount films in each language made.

SELECT language, SUM(gross) 
FROM films 
GROUP BY language;

--3.Get the country and total budget spent making movies in each country.

SELECT country, SUM (budget) 
FROM films 
GROUP BY country;

--4.Get the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.

SELECT release_year, country, MAX(budget) 
FROM films 
GROUP BY release_year, country 
ORDER BY release_year, country;

--5.Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.

SELECT country, release_year, MIN(gross) 
FROM films 
GROUP BY release_year, country 
ORDER BY country, release_year;

